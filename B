Part b 
1 queue
import java.util.Scanner;
public class queue {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);

        int n ,f=1;
        int r = -1;
        int flag = 1;

        System.out.println("enteet hte no. of elements\n");
        n = in.nextInt();
        int max = n;
        int q[] = new int[n];

        while(flag==1)
        {
            System.out.println("Menu\n");
            System.out.println(" 1.insert\n 2.delete\n 3.display\n 4.exit\n");

            System.out.println("enter the choice");
            int ch = in.nextInt();

            switch(ch)
            {
                case 1: if(r == max-1)
                {
                    System.out.println("queue is full\n");

                }
                else {
                    System.out.println("enter the elements\n");
                    int ele = in.nextInt();
                    q[++r] = ele;
                }
                    break;
                case 2:  if(f>r)
                {
                    System.out.println("queue is empty\n");
                }
                else
                {
                    System.out.println("deleted element is "+q[f++]);
                }
                    break;

                case 3: if(f>r)
                {
                    System.out.println("queue is empty\n");
                }
                else
                {
                    System.out.println("queue elements are");

                    for(int i = f;i<=r;i++)
                    {
                        System.out.println(q[i]);
                    }
                }
                    break;

                default : flag = 0;
                    break;
            }
        }

    }
}


stack
import java.util.Scanner;
public class stack {
    public static void main(String[] args)
    {
        int n,f=1;
        int top = -1;
        Scanner in = new Scanner(System.in);

        System.out.println("enter thr no. of elememts\n");
        n = in.nextInt();
        int max = n;
        int a[] = new int[n];

        while(f ==1)
        {
            System.out.println("\n menu");
            System.out.println("1.push \n 2.pop\n 3.display\n 4.exit\n");

            System.out.println("enter your choice");
            int c = in.nextInt();

            switch(c)
            {
                case 1 :  if(top == max-1)
                {
                    System.out.println("\n stack is full");
                }
                else {
                    System.out.println("enter the elemenrts tpo be pushed\n");
                    int e = in.nextInt();
                    a[++top] = e;
                }
                break;

                case 2: if(top == -1)
                {
                    System.out.println("stack is empty(underflow)\n");
                }
                else {
                    System.out.println("deleted element is "+a[top--]);
                }
                break;

                case 3: if(top == -1)
                {
                    System.out.println("stack is empty(underflow)\n");
                }
                else
                {
                    System.out.println("stack is:\n");
                    for(int i =0; i<=top;i++)
                    {
                        System.out.println("\n"+a[i]+ "\n");
                    }
                }
                break;

                default : f = 0;
                break;
            }
        }
    }
}




multilvl
import java.util.Scanner;
class iphone12
{
    void features()
    {
        System.out.println("fingerprint and face lock system\n");
    }
}
    class iphone13 extends iphone12
    {
        void features()
        {
            super.features();
            System.out.println("camera and display features\n");
        }
    }
    class iphone14 extends iphone13
    {
        void features()
        {
            super.features();
            System.out.println("phone tracking system\n");
        }
    }
public class multilevel {
    public static void main(String[] args)
    {
        iphone14 obj = new iphone14();
        System.out.println("iphone 14 features are:");
        obj.features();
    }
}

thread

public class thread implements Runnable
public void run() {
    System.out.println("Thread is running");
}
public static void main(String[] args) throws InterruptedException { 
Thread t = new Thread (new thread());
//Start the thread 
t.start();

// Wait for the thread to finish
t.join();

// Set the thread name
t.setName("My Thread");

// Get the thread name
System.out.println("Thread name is: " + t.getName());

// Set the thread priority 
t.setPriority (Thread.MAX_PRIORITY);

// Get the thread priority
System.out.println("Thread priority is:" + t.getPriority());

// Set the thread to be a daemon thread
t.setDaemon(true);

// Check if the thread is a daemon thread
System.out.println("Is the thread a daemon thread?"+ t.isDaemon());

// Check if the thread is alive
System.out.println("Is the thread alive?" + t.isAlive());

// Interrupt the thread
t.interrupt();

// Check if the thread has been interrupted
System.out.println("Is the thread interrupted?" t.isInterrupted());
}
}

fileoperation

public class filesoperation{
public static void main(String[] args) {

// create a new file 
File file = new File( pathname: "example.txt");

try {
    if (file.createNewFile()) {
    System.out.println("File created successfully.")
} 
else {
System.out.println("File already exists.");
}
} catch (IOException e) { 
e.printStackTrace();

}
// copy content from one file to another
File sourceFile = new File( pathname: "example.txt"); 
File destFile = new File( pathname: "example-copy.txt"); 
try {
FileInputStream inputStream = new FileInputStream(sourceFile);
FileOutputStream outputStream = new FileOutputStream(destFile); 
byte[] buffer = new byte[1024];
int length;
while ((length = inputStream.read(buffer)) > 0) { 
outputStream.write(buffer, off 8, length); }
inputStream.close(); outputStream.close();
System.out.println("Content copied successfully.");
}
// append data to the existing file
try {
FileWriter writer = new FileWriter (fileName: "example.txt",
writer.write(str. "\nThis is a new line of text appended to the file.");
writer.close();
System.out.println("Data appended successfully."); } 
catch (IOException e) {
    e.printStackTrace();
}

// print the file content
try {
BufferedReader reader = new BufferedReader(new FileReader(fileName: "example.txt"));
String line = reader.readLine();
while (line != null) {
    System.out.println(line);
    line=reader.readLine();
}
reader.close();  
} catch (IOException e) {
e.printStackTrace();
}
if (file.delete()){
    System.out.println("File deleted successfully.");
    }else {
        System.out.println("Failed to delete the file.");
        }
    }
}

studentresume

abstract class Resume {
public void personalinfo() {
    System.out.println("Name: John Doe");
    System.out.println("Email: johndoe@email.com");
    System.out.println("Phone: 123-456-7890");
}
public abstract void biodata();
class Teacher extends Resume {
    private String qualification;
    private int experience:
    private String achievements;
    public Teacher (String qualification, int experience, String achievements)

this.qualification qualification; 
this.experience = experience;
this.achievements achievements;
}
public void biodata() { 
System.out.println("Qualification:"+qualification);
System.out.println("Experience:" + experience+ "years");
System.out.println("Achievements:" +achievements+");
}
class Student extends Resume{
private String result
private String discipline;

public Student (String result, String discipline) {
this.result result;
this.discipline discipline;
}

public void biodata() { 
    System.out.println("Result:+ result);
    System.out.println("Discipline: discipline);
    }
}
public class studentb {
public static void main(String[] args) {
Resume teacher Resume = new Teacher( qualification: "PhD in Computer Science", experience 10, achievements");
System.out.println("Teacher Resume:"); 
teacher Resume.personalinfo();
teacher Resume.biodata();

Resume studentResume = new Student( result "3.8 GPA", discipline "Computer Science"); 
System.out.println("\nStudent Resume:"); 
studentResume.personalinfo(); 
studentResume.biodata();
    }
}

        
